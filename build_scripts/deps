###############################################################################
# SAGE_ROOT/spkg/standard/deps - the "real" Sage Makefile (for building)
###############################################################################

INST = installed
# Let e.g. SAGE_ROOT/spkg/install pass options to sage-spkg, i.e. currently
# "-f", to force rebuilding dependent packages during an upgrade (#9896).
#
# When upgrading from a 4.x version of Sage, the script "sage-spkg" will be
# found in SAGE_ROOT/local/bin until the new sage_root repo is installed.
# After that, it will be found in SAGE_ROOT/spkg/bin
# (SAGE_ROOT/spkg/bin is added to the PATH in spkg/install).
# Therefore, do not put an explicit path for sage-spkg here.
SAGE_SPKG = sage-spkg $${SAGE_SPKG_OPTS}
PIPE = $(SAGE_ROOT)/spkg/pipestatus

###############################################################################
# The file parallel_make.cfg is either empty (build in parallel) or
# contains ".NOTPARALLEL:" (build serially).  This file is written
# by spkg/install.  This setting has no effect on sub-makes -- it
# only determines whether more than one spkg may be built at a time.
###############################################################################
include $(SAGE_ROOT)/spkg/parallel_make.cfg

###############################################################################
# The base system; required in order to run sage-spkg
###############################################################################
BASE = $(INST)/$(PREREQ) $(INST)/$(DIR) $(INST)/$(SAGE_BZIP2) untar_sage

# Tell make not to look for files with these (base)names:
.PHONY: all base scripts

# Targets
all: $(BASE) \
     $(INST)/atlas \
     $(INST)/blas \
     $(INST)/boehm_gc \
     $(INST)/boost_cropped \
     $(INST)/cddlib \
     $(INST)/cephes \
     $(INST)/cliquer \
     $(INST)/conway \
     $(INST)/cvxopt \
     $(INST)/cython \
     $(INST)/docutils \
     $(INST)/ecl \
     $(INST)/eclib \
     $(INST)/ecm \
     $(INST)/elliptic_curves \
     $(INST)/f2c \
     $(INST)/flint \
     $(INST)/flintqs \
     $(INST)/fortran \
     $(INST)/fplll \
     $(INST)/freetype \
     $(INST)/genus2reduction \
     $(INST)/gap \
     $(INST)/gd \
     $(INST)/gdmodule \
     $(INST)/gfan \
     $(INST)/givaro \
     $(INST)/glpk \
     $(INST)/gnutls \
     $(INST)/graphs \
     $(INST)/gsl \
     $(INST)/iconv \
     $(INST)/iml \
     $(INST)/ipython \
     $(INST)/jinja2 \
     $(INST)/lapack \
     $(INST)/lcalc \
     $(INST)/libgcrypt \
     $(INST)/libgpg_error \
     $(INST)/libm4ri \
     $(INST)/libm4rie \
     $(INST)/libpng \
     $(INST)/linbox \
     $(INST)/matplotlib \
     $(INST)/maxima \
     $(INST)/mercurial \
     $(INST)/moin \
     $(INST)/mpfi \
     $(INST)/mpfr \
     $(INST)/mpir \
     $(INST)/mpmath \
     $(INST)/networkx \
     $(INST)/ntl \
     $(INST)/numpy \
     $(INST)/opencdk \
     $(INST)/palp \
     $(INST)/pari \
     $(INST)/patch \
     $(INST)/pexpect \
     $(INST)/pil \
     $(INST)/polybori \
     $(INST)/polytopes_db \
     $(INST)/ppl \
     $(INST)/pycrypto \
     $(INST)/pygments \
     $(INST)/pynac \
     $(INST)/python \
     $(INST)/python_gnutls \
     $(INST)/ratpoints \
     $(INST)/r \
     $(INST)/readline \
     $(INST)/rubiks \
     $(INST)/sagenb \
     $(INST)/sagetex \
     $(INST)/scipy \
     $(INST)/scons \
     $(INST)/setuptools \
     $(INST)/singular \
     $(INST)/sphinx \
     $(INST)/sqlalchemy \
     $(INST)/sqlite \
     $(INST)/symmetrica \
     $(INST)/sympow \
     $(INST)/sympy \
     $(INST)/tachyon \
     $(INST)/termcap \
     $(INST)/twisted \
     $(INST)/zlib \
     $(INST)/zn_poly \
     $(INST)/zodb
# Necessary when #9906 gets merged:
#     $(INST)/$(RPY) \
# (But move this up; it's just here because 'make' doesn't support comments
# within line continuations.)

base: $(BASE)

scripts: $(INST)/$(SAGE_SCRIPTS) # depends on $(BASE)

# Everything needed to start up Sage using "./sage".  Of course, not
# every part of Sage will work.  It does not include Maxima for example.
SAGERUNTIME = $(INST)/$(SAGE_SCRIPTS) $(INST)/sage $(INST)/sagenb \
              $(INST)/ipython $(INST)/gap

###############################################################################
# Building the base system
###############################################################################
$(INST)/dir:
	$(PIPE) "base/dir-install 2>&1" "tee -a $(SAGE_LOGS)/dir.log"

$(INST)/prereq: $(INST)/$(DIR)
	$(PIPE) "base/prereq-install 2>&1" "tee -a $(SAGE_LOGS)/prereq.log"

$(INST)/bzip2: $(INST)/prereq $(INST)/$(DIR)
	$(PIPE) "base/bzip2-install 2>&1" "tee -a $(SAGE_LOGS)/bzip2.log"

untar_sage: $(INST)/bzip2
    cd "$(SAGE_ROOT)/devel"
	bunzip2 -c sage.tar.bz2 2>/dev/null | tar tar fx - 2>/dev/null

###############################################################################
# Building normal packages
###############################################################################
$(INST)/atlas: $(BASE) $(INST)/lapack $(INST)/python $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) atlas 2>&1" "tee -a $(SAGE_LOGS)/atlas.log"

$(INST)/boehm_gc: $(BASE) $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) boehm_gc 2>&1" "tee -a $(SAGE_LOGS)/boehm_gc.log"

$(INST)/boost_cropped: $(BASE) $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) boost_cropped 2>&1" "tee -a $(SAGE_LOGS)/boost_cropped.log"

$(INST)/cliquer: $(BASE) $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) cliquer 2>&1" "tee -a $(SAGE_LOGS)/cliquer.log"

$(INST)/termcap: $(BASE) $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) $(TERMCAP) 2>&1" "tee -a $(SAGE_LOGS)/$(TERMCAP).log"

$(INST)/readline: $(BASE) $(INST)/patch $(INST)/$(TERMCAP)
	+$(PIPE) "$(SAGE_SPKG) readline 2>&1" "tee -a $(SAGE_LOGS)/readline.log"

$(INST)/iconv: $(BASE) $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) iconv 2>&1" "tee -a $(SAGE_LOGS)/iconv.log"

$(INST)/docutils: $(BASE) $(INST)/python $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) docutils 2>&1" "tee -a $(SAGE_LOGS)/docutils.log"

$(INST)/elliptic_curves: $(BASE) $(INST)/patch $(INST)/python \
        $(INST)/sqlite
	+$(PIPE) "$(SAGE_SPKG) $(ELLIPTIC_CURVES) 2>&1" "tee -a $(SAGE_LOGS)/$(ELLIPTIC_CURVES).log"

$(INST)/conway: $(BASE) $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) $(CONWAY) 2>&1" "tee -a $(SAGE_LOGS)/$(CONWAY).log"

$(INST)/graphs: $(BASE) $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) $(GRAPHS) 2>&1" "tee -a $(SAGE_LOGS)/$(GRAPHS).log"

$(INST)/glpk: $(BASE) $(INST)/mpir $(INST)/zlib $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) glpk 2>&1" "tee -a $(SAGE_LOGS)/glpk.log"

$(INST)/python: $(BASE) $(INST)/zlib \
		   $(INST)/readline $(INST)/sqlite \
		   $(INST)/gnutls $(INST)/libpng $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) python 2>&1" "tee -a $(SAGE_LOGS)/python.log"

$(INST)/patch: $(BASE) 
	+$(PIPE) "$(SAGE_SPKG) patch 2>&1" "tee -a $(SAGE_LOGS)/patch.log"

$(INST)/mpir: $(BASE) $(INST)/iconv $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) mpir 2>&1" "tee -a $(SAGE_LOGS)/mpir.log"

$(INST)/gsl: $(BASE) $(INST)/atlas $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) gsl 2>&1" "tee -a $(SAGE_LOGS)/gsl.log"

$(INST)/ntl: $(BASE) $(INST)/mpir $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) ntl 2>&1" "tee -a $(SAGE_LOGS)/ntl.log"

$(INST)/fplll: $(BASE) $(INST)/mpir $(INST)/mpfr $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) fplll 2>&1" "tee -a $(SAGE_LOGS)/fplll.log"

$(INST)/pari: $(BASE) $(INST)/readline \
		 $(INST)/mpir $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) pari 2>&1" "tee -a $(SAGE_LOGS)/pari.log"

$(INST)/polybori: $(BASE) $(INST)/python $(INST)/scons \
		     $(INST)/boost_cropped $(INST)/libm4ri \
		     $(INST)/gd $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) polybori 2>&1" "tee -a $(SAGE_LOGS)/polybori.log"

$(INST)/polytopes_db: $(BASE) $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) polytopes_db 2>&1" "tee -a $(SAGE_LOGS)/polytopes_db.log"

$(INST)/ppl: $(BASE) $(INST)/mpir
	+$(PIPE) "$(SAGE_SPKG) ppl 2>&1" "tee -a $(SAGE_LOGS)/ppl.log"

$(INST)/mpfr: $(BASE) $(INST)/mpir $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) mpfr 2>&1" "tee -a $(SAGE_LOGS)/mpfr.log"

$(INST)/mpfi: $(BASE) $(INST)/mpir $(INST)/mpfr $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) mpfi 2>&1" "tee -a $(SAGE_LOGS)/mpfi.log"

$(INST)/givaro: $(BASE) $(INST)/mpir $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) givaro 2>&1" "tee -a $(SAGE_LOGS)/givaro.log"

$(INST)/linbox: $(BASE) $(INST)/mpir $(INST)/ntl $(INST)/givaro \
		   $(INST)/gsl $(INST)/atlas $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) linbox 2>&1" "tee -a $(SAGE_LOGS)/linbox.log"

$(INST)/iml: $(BASE) $(INST)/mpir $(INST)/gsl $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) iml 2>&1" "tee -a $(SAGE_LOGS)/iml.log"

$(INST)/eclib: $(BASE) $(INST)/mpir $(INST)/pari $(INST)/ntl $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) eclib 2>&1" "tee -a $(SAGE_LOGS)/eclib.log"

$(INST)/genus2reduction: $(BASE) $(INST)/pari $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) genus2reduction 2>&1" "tee -a $(SAGE_LOGS)/genus2reduction.log"

$(INST)/palp: $(BASE) $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) palp 2>&1" "tee -a $(SAGE_LOGS)/palp.log"

$(INST)/lcalc: $(BASE) $(INST)/pari $(INST)/mpfr $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) lcalc 2>&1" "tee -a $(SAGE_LOGS)/lcalc.log"

$(INST)/pynac: $(BASE) $(INST)/python $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) pynac 2>&1" "tee -a $(SAGE_LOGS)/pynac.log"

$(INST)/sympow: $(BASE) $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) sympow 2>&1" "tee -a $(SAGE_LOGS)/sympow.log"

$(INST)/symmetrica: $(BASE) $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) symmetrica 2>&1" "tee -a $(SAGE_LOGS)/symmetrica.log"

# GAP requires Sage so that gap_reset_workspace works:
$(INST)/gap: $(BASE) $(INST)/readline $(INST)/sage $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) gap 2>&1" "tee -a $(SAGE_LOGS)/gap.log"

$(INST)/ipython: $(BASE) $(INST)/python $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) ipython 2>&1" "tee -a $(SAGE_LOGS)/ipython.log"

$(INST)/pexpect: $(BASE) $(INST)/python $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) pexpect 2>&1" "tee -a $(SAGE_LOGS)/pexpect.log"

$(INST)/gd: $(BASE) $(INST)/libpng $(INST)/freetype $(INST)/iconv $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) gd 2>&1" "tee -a $(SAGE_LOGS)/gd.log"

$(INST)/gdmodule: $(BASE) $(INST)/python $(INST)/gd $(INST)/iconv $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) gdmodule 2>&1" "tee -a $(SAGE_LOGS)/gdmodule.log"

$(INST)/opencdk: $(BASE) $(INST)/zlib $(INST)/libgcrypt $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) opencdk 2>&1" "tee -a $(SAGE_LOGS)/opencdk.log"

$(INST)/libgpg_error: $(BASE) $(INST)/iconv  $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) libgpg_error 2>&1" "tee -a $(SAGE_LOGS)/libgpg_error.log"

$(INST)/libgcrypt: $(BASE) $(INST)/libgpg_error $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) libgcrypt 2>&1" "tee -a $(SAGE_LOGS)/libgcrypt.log"

$(INST)/gnutls: $(BASE) $(INST)/zlib $(INST)/opencdk \
		   $(INST)/libgcrypt $(INST)/libgpg_error  $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) gnutls 2>&1" "tee -a $(SAGE_LOGS)/gnutls.log"

$(INST)/python_gnutls: $(BASE) $(INST)/gnutls $(INST)/python $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) python_gnutls 2>&1" "tee -a $(SAGE_LOGS)/python_gnutls.log"

$(INST)/scons: $(BASE) $(INST)/python $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) scons 2>&1" "tee -a $(SAGE_LOGS)/scons.log"

$(INST)/rubiks: $(BASE) $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) rubiks 2>&1" "tee -a $(SAGE_LOGS)/rubiks.log"

# extcode must be built before MoinMoin because it has jsmath in it:
$(INST)/moin: $(BASE) $(INST)/python $(INST)/$(EXTCODE) \
		 $(INST)/sagenb $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) moin 2>&1" "tee -a $(SAGE_LOGS)/moin.log"

$(INST)/sqlite: $(BASE) $(INST)/readline $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) sqlite 2>&1" "tee -a $(SAGE_LOGS)/sqlite.log"

$(INST)/mercurial: $(BASE) $(INST)/python $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) mercurial 2>&1" "tee -a $(SAGE_LOGS)/mercurial.log"

# To build SageTeX, you just need Python, but to test (SAGE_CHECK=yes)
# SageTeX, you actually need to run sage, produce plots,...
$(INST)/sagetex: $(BASE) $(INST)/python $(INST)/patch \
                    $(SAGERUNTIME) $(INST)/maxima $(INST)/scipy \
                    $(INST)/matplotlib $(INST)/pil $(INST)/tachyon
	+$(PIPE) "$(SAGE_SPKG) sagetex 2>&1" "tee -a $(SAGE_LOGS)/sagetex.log"

$(INST)/setuptools: $(BASE) $(INST)/python $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) setuptools 2>&1" "tee -a $(SAGE_LOGS)/setuptools.log"

$(INST)/singular: $(BASE) $(INST)/mpir $(INST)/ntl \
		     $(INST)/readline $(INST)/mpfr  $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) singular 2>&1" "tee -a $(SAGE_LOGS)/singular.log"

$(INST)/pycrypto: $(BASE) $(INST)/python $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) pycrypto 2>&1" "tee -a $(SAGE_LOGS)/pycrypto.log"

$(INST)/networkx: $(BASE) $(INST)/python $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) networkx 2>&1" "tee -a $(SAGE_LOGS)/networkx.log"

$(INST)/mpmath: $(BASE) $(INST)/python $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) mpmath 2>&1" "tee -a $(SAGE_LOGS)/mpmath.log"

$(INST)/zlib: $(BASE) $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) zlib 2>&1" "tee -a $(SAGE_LOGS)/zlib.log"

##  << NON-GUI matplotlib >>
$(INST)/freetype: $(BASE) $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) freetype 2>&1" "tee -a $(SAGE_LOGS)/freetype.log"

$(INST)/libpng: $(BASE) $(INST)/zlib $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) libpng 2>&1" "tee -a $(SAGE_LOGS)/libpng.log"

$(INST)/matplotlib: $(BASE) $(INST)/python $(INST)/numpy \
		       $(INST)/freetype $(INST)/libpng \
		       $(INST)/gdmodule $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) matplotlib 2>&1" "tee -a $(SAGE_LOGS)/matplotlib.log"
####

$(INST)/cddlib: $(BASE) $(INST)/mpir $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) cddlib 2>&1" "tee -a $(SAGE_LOGS)/cddlib.log"

$(INST)/gfan: $(BASE) $(INST)/mpir $(INST)/cddlib $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) gfan 2>&1" "tee -a $(SAGE_LOGS)/gfan.log"

$(INST)/tachyon: $(BASE) $(INST)/libpng $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) tachyon 2>&1" "tee -a $(SAGE_LOGS)/tachyon.log"

$(INST)/ecm: $(BASE) $(INST)/mpir $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) ecm 2>&1" "tee -a $(SAGE_LOGS)/ecm.log"

$(INST)/ratpoints: $(BASE) $(INST)/mpir $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) ratpoints 2>&1" "tee -a $(SAGE_LOGS)/ratpoints.log"

$(INST)/ecl: $(BASE) $(INST)/mpir \
		$(INST)/readline $(INST)/boehm_gc $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) ecl 2>&1" "tee -a $(SAGE_LOGS)/ecl.log"

$(INST)/maxima: $(BASE) $(INST)/ecl $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) maxima 2>&1" "tee -a $(SAGE_LOGS)/maxima.log"

# Note that even with a separate RPy spkg (#9906), Sage's R will still depend on
# Python (but does no longer on SAGE_SCRIPTS, #10016):
$(INST)/r: $(BASE) $(INST)/python $(INST)/atlas $(INST)/iconv $(INST)/fortran $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) r 2>&1" "tee -a $(SAGE_LOGS)/r.log"

# Needed when #9906 gets merged (moving RPy out of R's spkg):
# $(INST)/$(RPY): $(BASE) $(INST)/python $(INST)/r $(INST)/patch
# 	+$(PIPE) "$(SAGE_SPKG) $(RPY) 2>&1" "tee -a $(SAGE_LOGS)/$(RPY).log"

$(INST)/sympy: $(BASE) $(INST)/python $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) sympy 2>&1" "tee -a $(SAGE_LOGS)/sympy.log"

$(INST)/cython: $(BASE) $(INST)/python $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) cython 2>&1" "tee -a $(SAGE_LOGS)/cython.log"

$(INST)/flintqs: $(BASE) $(INST)/mpir $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) flintqs 2>&1" "tee -a $(SAGE_LOGS)/flintqs.log"

$(INST)/flint: $(BASE) $(INST)/mpir $(INST)/ntl $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) flint 2>&1" "tee -a $(SAGE_LOGS)/flint.log"

# Mercurial must be built before building extcode. See trac ticket #6508.
$(INST)/$(EXTCODE): $(BASE) $(INST)/mercurial
	+$(PIPE) "$(SAGE_SPKG) $(EXTCODE) 2>&1" "tee -a $(SAGE_LOGS)/$(EXTCODE).log"

$(INST)/libm4ri: $(BASE) $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) libm4ri 2>&1" "tee -a $(SAGE_LOGS)/libm4ri.log"

$(INST)/libm4rie: $(BASE) $(INST)/patch $(INST)/libm4ri $(INST)/givaro $(INST)/ntl
	+$(PIPE) "$(SAGE_SPKG) libm4rie 2>&1" "tee -a $(SAGE_LOGS)/libm4rie.log"

# zn_poly really does depend on Python, despite this is far from obvious.
# The 'configure' script in zn_poly calls Python to make a 'makefile'.
$(INST)/zn_poly: $(BASE) $(INST)/mpir $(INST)/python $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) zn_poly 2>&1" "tee -a $(SAGE_LOGS)/zn_poly.log"

# setuptools forgets to update easy-install.pth during parallel
# builds, so we build the relevant packages serially.  Note: To avoid
# branching, we haven't given explicit dependencies, but the chain's
# order is important.
$(INST)/sagenb: $(BASE) $(INST)/sqlalchemy $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) sagenb 2>&1" "tee -a $(SAGE_LOGS)/sagenb.log"

$(INST)/sqlalchemy: $(BASE) $(INST)/sphinx $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) sqlalchemy 2>&1" "tee -a $(SAGE_LOGS)/sqlalchemy.log"

$(INST)/sphinx: $(BASE) $(INST)/jinja2 $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) sphinx 2>&1" "tee -a $(SAGE_LOGS)/sphinx.log"

$(INST)/jinja2: $(BASE) $(INST)/pygments $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) jinja2 2>&1" "tee -a $(SAGE_LOGS)/jinja2.log"

$(INST)/pygments: $(BASE) $(INST)/zodb $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) pygments 2>&1" "tee -a $(SAGE_LOGS)/pygments.log"

$(INST)/zodb: $(BASE) $(INST)/twisted $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) zodb 2>&1" "tee -a $(SAGE_LOGS)/zodb.log"

$(INST)/twisted: $(BASE) $(INST)/python $(INST)/python_gnutls \
		    $(INST)/pexpect $(INST)/docutils \
		    $(INST)/setuptools $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) twisted 2>&1" "tee -a $(SAGE_LOGS)/twisted.log"

# For reference and for when the setuptools problem is solved, here
# are the actual dependencies:
#
# sagenb: python pexpect twisted jinja2 sphinx docutils setuptools
# sqlalchemy: python setuptools
# sphinx: docutils jinja2 pygments
# jinja2: python docutils setuptools
# pygments: python setuptools
# twisted: python python_gnutls setuptools
# zodb: python setuptools

########################################################################
# List all *build-time* dependencies of the Sage library.  These are,
# on the one hand, programs needed for the build/install process of the
# Sage library (e.g. SAGE_SCRIPTS, SCONS, MERCURIAL, JINJA2), and on the
# other hand all dependencies for Cython files (e.g. PARI, NTL, MPIR).
########################################################################
$(INST)/sage: $(BASE) \
		 $(INST)/atlas \
		 $(INST)/cephes \
		 $(INST)/cliquer \
		 $(INST)/cython \
		 $(INST)/ecl \
		 $(INST)/eclib \
		 $(INST)/ecm \
		 $(INST)/flint \
		 $(INST)/fplll \
		 $(INST)/gd \
		 $(INST)/givaro \
		 $(INST)/glpk \
		 $(INST)/gsl \
		 $(INST)/iml \
		 $(INST)/jinja2 \
		 $(INST)/lcalc \
		 $(INST)/libm4ri \
		 $(INST)/libm4rie \
		 $(INST)/libpng \
		 $(INST)/linbox \
		 $(INST)/mercurial \
		 $(INST)/mpfi \
		 $(INST)/mpfr \
		 $(INST)/mpir \
		 $(INST)/ntl \
		 $(INST)/numpy \
		 $(INST)/pari \
		 $(INST)/polybori \
		 $(INST)/ppl \
		 $(INST)/pynac \
		 $(INST)/python \
		 $(INST)/ratpoints \
		 $(INST)/readline \
		 $(INST)/scons \
		 $(INST)/singular \
		 $(INST)/symmetrica \
		 $(INST)/zn_poly
	+$(PIPE) "$(SAGE_SPKG) sage 2>&1" "tee -a $(SAGE_LOGS)/sage.log"

###############################################################################
# Further receipts for normal packages:
###############################################################################

# Do not remove PYTHON below -- see trac 9368
$(INST)/fortran: $(BASE) $(INST)/python $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) fortran 2>&1" "tee -a $(SAGE_LOGS)/fortran.log"

$(INST)/f2c: $(BASE) $(INST)/fortran $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) f2c 2>&1" "tee -a $(SAGE_LOGS)/f2c.log"

$(INST)/pil: $(BASE) $(INST)/python $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) pil 2>&1" "tee -a $(SAGE_LOGS)/pil.log"

$(INST)/lapack: $(BASE) $(INST)/fortran $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) lapack 2>&1" "tee -a $(SAGE_LOGS)/lapack.log"

$(INST)/blas: $(BASE) $(INST)/fortran $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) blas 2>&1" "tee -a $(SAGE_LOGS)/blas.log"

$(INST)/numpy: $(BASE) $(INST)/python $(INST)/fortran $(INST)/f2c \
		  $(INST)/lapack $(INST)/blas $(INST)/atlas $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) numpy 2>&1" "tee -a $(SAGE_LOGS)/numpy.log"

$(INST)/scipy: $(BASE) $(INST)/fortran $(INST)/f2c \
		  $(INST)/lapack $(INST)/blas $(INST)/numpy $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) scipy 2>&1" "tee -a $(SAGE_LOGS)/scipy.log"

$(INST)/cvxopt: $(BASE) $(INST)/fortran $(INST)/f2c \
		   $(INST)/lapack $(INST)/blas $(INST)/numpy \
		   $(INST)/atlas $(INST)/cephes $(INST)/patch \
		   $(INST)/gsl $(INST)/glpk
	+$(PIPE) "$(SAGE_SPKG) cvxopt 2>&1" "tee -a $(SAGE_LOGS)/cvxopt.log"

$(INST)/cephes: $(BASE) $(INST)/patch
	+$(PIPE) "$(SAGE_SPKG) cephes 2>&1" "tee -a $(SAGE_LOGS)/cephes.log"

###############################################################################
